# slapd.conf - Configuration file for LDAP SLAPD
#
# @author	Ten. Col. t. (tlm) RN Giulio CRISCOLI	giulio.criscoli@esercito.difesa.it
# @version	1.0.0	September 28th, 2022
#
# This configuration file has been realized based on D&G as provided by the book "Mastering OpenLDAP - Configuringm Securing and Integrating Directory Services" by Matt Butcher
# ed. PACKT Publishing 2007 (ISBN 978-1-847191-02-1)

##########
# BASICS #
##########

# Please see /root/.bashrc for OPENLDAP-like variables definition

# All include directives shall always be followed by a full path to a file in the file system
# The include directive can be used to include any additional configuration file, thet is then expanded in place of the directive itself and treated as part of the main
# configuration file
#
####################
# SCHEMA DEFINITIONS #
####################
#
# Schemas provide the definitions of the different object classes and atribute types that OpenLDAP should support
# The core.schema, in particular, stores the basic attribute and object class definitions as per the LDAPv3 specifications. It _*SHALL ALWAYS*_ be included, as opposed
# to other schemas whose inclusion is arbitrary, depending on what the owner wants the directory to be able to represent.

include /usr/local/etc/openldap/schema/core.schema

include /usr/local/etc/openldap/schema/cosine.schema
# Please see RFC 4524 for reference (https://www.rfc-editor.org/rfc/rfc4524.html)

include /usr/local/etc/openldap/schema/inetorgperson.schema
# Please see RFC 2798 for reference (https://www.rfcc-edito.org/rfc/rfc2798.html)

pidfile /usr/local/var/run/slapd/slapd.pid
# The file that contains the running instance PId

argsfile /usr/local/var/run/slapd/slapd.args
# The file that contains the running instance startup arguments
# Both above files require that the user running OpenLDAP (slapd:slapd) should be able to read and write them; as both files are created at slpad start up and deleted when
# its execution terminates, slapd needs to hold r/w privileges on the containing directory (chown slapd:root ${OPENLDAP_RUN_DIR}; chmod +rw ${OPENLDAP_RUN_DIR}). This needs
# be done prior to the first OpenLDAP execution.

loglevel none

###########
# MODULES #
###########
modulepath /usr/local/libexec/openldap 

moduleload back_mdb
# As per the reference book guidance, the database should be set as HDB, an evolution of BDB.
# However, as of OpenLDAP 2.4, both HDB and BDB were deprecated in favour of MDB, which we are then using.
# moduleload syncprov
# The module syncprov provides the OpenLDAP overlay that consents to the synchronization. It must be enabled on the master side of the replication hierarchy
# It won't be enabled until necessary.

####################################
# DATABASE (BACKEND) CONFIGURATION #
####################################

database mdb
# The database backend that the OpenLDAP server is using to store the data related to tree "dc=example,dc=com"

suffix "dc=example,dc=com"
# The tree this backend configuration is referred to

rootdn "cn=Manager,dc=example,dc=com"
# The tree manager credentials

rootpw Manager
# The tree manager password. In this case, the password is cleartext, but it is recommended that it be encrypted by use of the
# _*ldappasswd*_ utility
# For it to be used, the server must be configured, up and running!!!!
# In any case, the rootdn password is stored outside the DIT to ensure that the asdministrator won't lock himself out
# of the tree he's meanto to be managing...

directory /usr/local/var/openldap-data
# The path where the DB is located

index objectClass eq
# A list of the items that shall be indexed and the intended use of each index

index cn eq,sub
# Multiple indexing lists can be maintained; in this case, a second list is set up so that objectClass items searches will look for
# total equality only, whereas cn searches will respond positively both in case of total or substring equality.
# _*IMPORTANT NOTE*_:	once a database is running, changing the indexing policy is only effective if indexes are re-created by use of
# the _*slapindex*_ utility!!!

########
# ACLs #
########
#
# Access Control Lists (ACLs) define what level of access any given users is granted to any defined resource.
# The overall syntax of the command is
# access to <resource>
# 	by <who> <access level>
# Every access list consists of one single access to statement and as many as necessary by statements.
# Just like any other setting in the slapd.conf file, configurations span multiple lines, provided that each subsequent line starts with a white space (space or tab)
# By default, the slapd server is non-permissive, i.e.: only explicitely granted privileges can be applied. A non-explicitely granted privilege is a negated privilege.
# In simple words: the line "by * none" can be omitted, in that what is not explicitely allowed, is in fact negated.
# _*ACLs are applied sequentially: if a previous ACL negates a privilege, no subsequent ACL can grant it!!!*_

access	to attrs=userPassword
	by anonymous	auth
	by self		write
	by *		none

access	to *
	by anonymous	auth
	by self		write
	by *		none

# Once we are done with the configuration file, we can test it by use of the slaptest utility, which verifies its syntax, but also that the required resources (backend, overlays,
# directories, etc.) exist and are accessible.
